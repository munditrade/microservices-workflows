name: Deploy environment variables
on:
  workflow_call:
    inputs:
      PROJECT_NAME:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      ENVS_PATH:
        required: true
        type: string
      ENV_REPOSITORY:
        required: true
        type: string
    secrets:
      BACKEND_MONOREPO_ENGINE_VAULT_TOKEN:
        required: true
      VAULT_INTERNAL_ADDR:
        required: true
      APPLICATION_ID:
        required: true
      APPLICATION_PRIVATE_KEY:
        required: true
      VPN_CONFIG:
        required: true
      VPN_PASS:
        required: true
      ARGOCD_TOKEN_SECRET:
        required: true
      ARGOCD_SERVER_VAR:
        required: true

jobs:
  promote-env:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APPLICATION_ID }}
          private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Step Connect to VPN
        uses: munditrade/action-connect_vpn@main
        id: vpn
        with:
          vpn_config: ${{ secrets.VPN_CONFIG }}
          vpn_pass: ${{ secrets.VPN_PASS }}

      - name: Check Envs
        uses: munditrade/action-check-envs@main
        id: check
        with:
          addr: ${{ secrets.VAULT_INTERNAL_ADDR }}
          token: ${{ secrets.BACKEND_MONOREPO_ENGINE_VAULT_TOKEN }}
          root_engine: backend-monorepo

      - name: Pushes test file
        id: push
        continue-on-error: true
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ steps.generate_token.outputs.token }}
        with:
          source_file: "${{ inputs.ENVS_PATH }}/${{ inputs.ENVIRONMENT }}"
          destination_folder: "values/env/"
          destination_repo: "${{ inputs.ENV_REPOSITORY }}"
          user_email: "backend-monorepo@mundi.io"
          user_name: "environment-promote"
          commit_message: "update env for bc"

      - name: Retry on failure Pushes test file
        if: steps.push.outcome == 'failure'
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ steps.generate_token.outputs.token }}
        with:
          source_file: "${{ inputs.ENVS_PATH }}/${{ inputs.ENVIRONMENT }}"
          destination_folder: "values/env/"
          destination_repo: "${{ inputs.ENV_REPOSITORY }}"
          user_email: "backend-monorepo@mundi.io"
          user_name: "environment-promote"
          commit_message: "update env for bc"

  sync-argocd:
    needs: promote-env
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: get changed files
        if: ${{ github.event_name != 'workflow_dispatch' }}
        id: files
        uses: munditrade/get-changed-files@master

      - name: Step Connect to VPN
        uses: munditrade/action-connect_vpn@main
        id: vpn
        with:
          vpn_config: ${{ secrets.VPN_CONFIG }}
          vpn_pass: ${{ secrets.VPN_PASS }}

      - name: Sync ArgoCD Application
        continue-on-error: true
        id: sync
        shell: bash
        run: |
          # set -x
            echo ":: Syncing ${{ inputs.PROJECT_NAME }} specs"
            echo 'curl -I -X POST "${{ secrets.ARGOCD_SERVER_VAR }}/api/v1/applications/env-backend-${{ inputs.PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/sync" -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN_SECRET }}"'
            curl -I -X POST "${{ secrets.ARGOCD_SERVER_VAR }}/api/v1/applications/env-backend-{{ inputs.PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/sync" -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN_SECRET }}"
            exitCode="$?"
            if [ $exitCode != 0 ]; then
              echo ":: Sync request for ${{ inputs.PROJECT_NAME }} application failed"
              exit 1
            else
              echo ":: Sync request for ${{ inputs.PROJECT_NAME }} application success"
            fi
          # set +x

      - name: Retry Sync ArgoCD Application
        if: steps.sync.outcome == 'failure'
        shell: bash
        run: |
          # set -x
            echo ":: Syncing ${{ inputs.PROJECT_NAME }} specs"
            echo 'curl -I -X POST "${{ secrets.ARGOCD_SERVER_VAR }}/api/v1/applications/env-backend-${{ inputs.PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/sync" -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN_SECRET }}"'
            curl -I -X POST "${{ secrets.ARGOCD_SERVER_VAR }}/api/v1/applications/env-backend-{{ inputs.PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/sync" -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN_SECRET }}"
            exitCode="$?"
            if [ $exitCode != 0 ]; then
              echo ":: Sync request for ${{ inputs.PROJECT_NAME }} application failed"
              exit 1
            else
              echo ":: Sync request for ${{ inputs.PROJECT_NAME }} application success"
            fi
          # set +x
