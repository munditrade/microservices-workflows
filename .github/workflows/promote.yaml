name: Promote
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: environment
        required: true
        options:
          - stg
          - prd
  workflow_call:
    inputs:
      PROJECT_NAME:
        required: true
        type: string
      DESTINATION_REPOSITORY:
        required: true
        type: string

jobs:
  check-envs:
    runs-on: ubuntu-22.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Set build config
        id: config
        run: |
          IFS="_" read -r SERVICE vTAG <<< ${GITHUB_REF##*/}
            echo "Saving tag"
            TAG=$(echo $vTAG | sed -e 's/^\(v\)//g')
            echo ::set-output name=tag::$TAG
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git checkout HEAD^
      - name: Step Connect to VPN
        uses: munditrade/action-connect_vpn@main
        id: vpn
        with:
          vpn_config: ${{ secrets.VPN_CONFIG }}
          vpn_pass: ${{ secrets.VPN_PASS }}
      - name: Check Envs
        uses: munditrade/action-check-envs@main
        id: check
        with:
          addr: ${{ secrets.VAULT_INTERNAL_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          root_engine: backend-monorepo
          service_name: ${{ inputs.PROJECT_NAME }}
  update-values:
    runs-on: ubuntu-latest
    needs: check-envs
    steps:
      - name: tag name
        run: echo running on branch ${GITHUB_REF##*/}
      - name: Set build config
        id: config
        run: |
          IFS="_" read -r SERVICE vTAG <<< ${GITHUB_REF##*/}
            echo "Saving tag"
            TAG=$(echo $vTAG | sed -e 's/^\(v\)//g')
            echo ::set-output name=tag::$TAG

      - name: checkout tag
        uses: actions/checkout@v2

      - name: Setup template for updated image to be deployed
        uses: cuchi/jinja2-action@v1.2.0
        id: deploy-file
        with:
          template: .github/templates/bc-deployment-template.yaml.j2
          output_file: .argocd-source-backend-${{ inputs.PROJECT_NAME }}-${{ github.event.inputs.environment }}.yaml
          strict: true
          variables: |
            tag=${{ steps.config.outputs.tag }}
            repository=gcr.io/prj-mundi-infra-services/${{ github.event.repository.name }}-${{ inputs.PROJECT_NAME }}

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APPLICATION_ID }}
          private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Push file
        id: push
        if: startsWith(github.ref, 'refs/tags/')
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ steps.generate_token.outputs.token }}
        with:
          source_file: .argocd-source-backend-${{ inputs.PROJECT_NAME }}-${{ github.event.inputs.environment }}.yaml
          destination_repo: "${{ inputs.DESTINATION_REPOSITORY }}"
          destination_branch: ${{ github.event.inputs.environment }}
          user_email: "${{ github.event.repository.name }}@mundi.io"
          user_name: "${{ github.event.repository.name }}"
          commit_message: "deployment from ${{ github.event.repository.name }}"

      - name: Retry on failure
        if: steps.push.outcome == 'failure'
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ steps.generate_token.outputs.token }}
        with:
          source_file: .argocd-source-backend-${{ inputs.PROJECT_NAME }}-${{ github.event.inputs.environment }}.yaml
          destination_repo: "${{ inputs.DESTINATION_REPOSITORY }}"
          destination_branch: ${{ steps.config.outputs.environment }}
          user_email: "${{ github.event.repository.name }}@mundi.io"
          user_name: "${{ github.event.repository.name }}"
          commit_message: "deployment from ${{ github.event.repository.name }}"
